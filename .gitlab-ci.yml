image: python:3.11-slim

variables:
  POSTGRES_DB: "test_db"
  POSTGRES_USER: "test_user"
  POSTGRES_PASSWORD: "test_password"
  POSTGRES_HOST: "postgres"
  POSTGRES_HOST_AUTH_METHOD: "trust"
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"
  DJANGO_SETTINGS_MODULE: "core.settings"
  PYTHONPATH: "${CI_PROJECT_DIR}"

cache:
  paths:
    - .pip-cache/
    - venv/
  key: "${CI_COMMIT_REF_SLUG}"

stages:
  - test
  - quality
  - build

services:
  - postgres:latest

.base_config:
  tags:
    - python
    - django
    - production
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt

test:
  extends: .base_config
  stage: test
  script:
    - pytest apps/ -v --nomigrations --reuse-db --cov=apps --cov-report=xml
    - coverage report
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"

code_quality:
  extends: .base_config
  stage: quality
  script:
    - pip install black flake8 isort
    - black --check apps/
    - flake8 apps/
    - isort --check-only apps/
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"

security_check:
  extends: .base_config
  stage: quality
  script:
    - pip install safety bandit
    - safety check
    - bandit -r apps/
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"

build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE:staging -t $DOCKER_IMAGE:$CI_COMMIT_SHA .
    - docker push $DOCKER_IMAGE:staging
    - docker push $DOCKER_IMAGE:$CI_COMMIT_SHA
  rules:
    - if: $CI_COMMIT_BRANCH == "staging"
