image: python:3.11-slim

variables:
  POSTGRES_DB: "test_db"
  POSTGRES_USER: "test_user"
  POSTGRES_PASSWORD: "test_password"
  POSTGRES_HOST_AUTH_METHOD: "trust"
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"

# Otimização de cache
cache:
  paths:
    - .pip-cache/
    - venv/
  key: "${CI_COMMIT_REF_SLUG}"

stages:
  - test
  - quality
  - build
  # - deploy  # Comentado conforme solicitado

services:
  - postgres:latest

# Configuração base para todos os jobs
.base_config:
  tags:
    - python
    - django
    - production
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt

# Testes
test:
  extends: .base_config
  stage: test
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"
  script:
    - pip install pytest pytest-cov pytest-django
    - pytest --cov=. --cov-report=xml
    - coverage report
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "staging"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_MERGE_REQUEST_ID

# Qualidade de código
code_quality:
  extends: .base_config
  stage: quality
  script:
    - pip install black flake8 isort
    - black --check .
    - flake8 .
    - isort --check-only .
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "staging"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_MERGE_REQUEST_ID

security_check:
  extends: .base_config
  stage: quality
  script:
    - pip install safety bandit
    - safety check
    - bandit -r .
  allow_failure: true
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "staging"

# Build Docker
build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        export TAG="latest"
      elif [[ "$CI_COMMIT_BRANCH" == "staging" ]]; then
        export TAG="staging"
      else
        export TAG="develop"
      fi
    - docker build -t $DOCKER_IMAGE:$TAG -t $DOCKER_IMAGE:$CI_COMMIT_SHA .
    - docker push $DOCKER_IMAGE:$TAG
    - docker push $DOCKER_IMAGE:$CI_COMMIT_SHA
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "staging"
    - if: $CI_COMMIT_BRANCH == "develop"
# Deploy stages (comentados para uso futuro)
#.deploy_template: &deploy_definition
#  stage: deploy
#  image: alpine:latest
#  before_script:
#    - apk add --no-cache openssh-client
#    - eval $(ssh-agent -s)
#    - echo "$SSH_PRIVATE_KEY" | ssh-add -
#
#deploy_staging:
#  <<: *deploy_definition
#  script:
#    - echo "Deploy to staging"
#  only:
#    - staging
#
#deploy_production:
#  <<: *deploy_definition
#  script:
#    - echo "Deploy to production"
#  only:
#    - main
#  when: manual
