image: docker:20.10.16

services:
  - docker:20.10.16-dind

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  POSTGRES_DB: "bd-dev"
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: "123456"
  POSTGRES_HOST: "postgres"
  POSTGRES_PORT: "5433"
  DOCKER_DRIVER: overlay2

stages:
  - test
  - build
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - ~/.cache/pre-commit
    - ~/.cache/pypoetry/virtualenvs

test:
  stage: test
  only:
    - staging
  tags:
    - python
    - django
    - production
  before_script:
    - apk add --no-cache python3 py3-pip postgresql-client
    - pip install docker-compose
  script:
    # Aguardar o PostgreSQL estar pronto
    - |
      until PGPASSWORD=$POSTGRES_PASSWORD psql -h postgres -U $POSTGRES_USER -p 5433 -d $POSTGRES_DB -c '\q'; do
        echo "Postgres is unavailable - sleeping"
        sleep 1
      done

    # Construir e iniciar containers
    - docker-compose -f docker-compose.ci.yml up -d

    # Executar testes
    - docker-compose -f docker-compose.ci.yml exec -T api poetry run pytest --cov=./ --cov-report=xml

    # Verificar migrações
    - docker-compose -f docker-compose.ci.yml exec -T api poetry run python manage.py makemigrations --check --dry-run
    - docker-compose -f docker-compose.ci.yml exec -T api poetry run python manage.py migrate --check --dry-run

    # Pre-commit
    - docker-compose -f docker-compose.ci.yml exec -T api pip install pre-commit
    - docker-compose -f docker-compose.ci.yml exec -T api pre-commit run --all-files

    # Comparação de requirements
    - docker-compose -f docker-compose.ci.yml exec -T api poetry export -f requirements.txt --output requirements-new.txt
    - docker-compose -f docker-compose.ci.yml exec -T api diff requirements.txt requirements-new.txt || true
  after_script:
    - docker-compose -f docker-compose.ci.yml down -v

build:
  stage: build
  only:
    - staging
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
