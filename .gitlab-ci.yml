image: docker:latest

variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"

services:
  - docker:dind

stages:
  - test
  - build
  - deploy

cache:
  paths:
    - .pip-cache/
    - .pytest_cache/

test:
  stage: test
  only:
    - staging
  before_script:
    - apk add --no-cache python3 py3-pip docker-compose
  script:
    - docker-compose -f docker-compose.ci.yml up -d
    - sleep 10 # Aguarda servi√ßos iniciarem
    - docker-compose -f docker-compose.ci.yml exec -T api pytest
    - docker-compose -f docker-compose.ci.yml exec -T api python manage.py check
  after_script:
    - docker-compose -f docker-compose.ci.yml down -v

build:
  stage: build
  only:
    - staging
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest

deploy_staging:
  stage: deploy
  only:
    - staging
  script:
    - echo "Deploy to staging environment"
    # Adicione seus comandos de deploy aqui

deploy_production:
  stage: deploy
  only:
    - main
  when: manual
  script:
    - echo "Deploy to production environment"
    # Adicione seus comandos de deploy aqui
