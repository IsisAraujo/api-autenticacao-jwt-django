image: python:3.11-slim

variables:
  POSTGRES_DB: "bd-dev"
  POSTGRES_PASSWORD: "123456"
  POSTGRES_USER: "postgres"
  DATABASE_HOST: "postgres"
  POSTGRES_PORT: "5432"
  POETRY_VERSION: "1.8.4"
  PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit
  PIP_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pip
  POETRY_CACHE_DIR: ${CI_PROJECT_DIR}/.cache/pypoetry

default:
  tags:
    - django
    - production
    - python

cache:
  key:
    files:
      - poetry.lock
      - .pre-commit-config.yaml
  paths:
    - .cache/pip
    - .cache/pre-commit
    - .cache/pypoetry
    - .venv

stages:
  - setup
  - quality
  - test

.services:
  services:
    - name: postgres:12.2-alpine
      alias: postgres
      variables:
        POSTGRES_DB: "bd-dev"
        POSTGRES_USER: "postgres"
        POSTGRES_PASSWORD: "123456"
        DATABASE_HOST: postgres
      command:
        [
          "postgres",
          "-c",
          "fsync=off",
          "-c",
          "synchronous_commit=off",
          "-c",
          "full_page_writes=off",
        ]

.install-deps:
  before_script:
    - apt-get update && apt-get install -y git curl
    - pip install poetry==${POETRY_VERSION}
    - poetry config virtualenvs.in-project true
    - poetry install --no-interaction --no-ansi
    - poetry run pip install pre-commit safety

setup:
  stage: setup
  script:
    - apt-get update && apt-get install -y git curl
    - pip install poetry==${POETRY_VERSION}
    - poetry config virtualenvs.in-project true
    - poetry install --no-interaction --no-ansi
    - poetry run pip install pre-commit safety
    - git init
    - git add .
    - poetry export -f requirements.txt --output requirements.txt

code-quality:
  stage: quality
  extends: .install-deps
  script:
    - poetry run pre-commit run --all-files
    # Compare requirements
    - git fetch origin staging
    - git checkout origin/staging -- requirements.txt || true
    - mv requirements.txt requirements.txt.staging || true
    - poetry export -f requirements.txt --output requirements.txt.new
    - diff requirements.txt.staging requirements.txt.new || exit 1

migrations:
  stage: test
  extends:
    - .install-deps
    - .services
  script:
    - poetry run python manage.py makemigrations --check --dry-run
    - poetry run python manage.py migrate --check

tests:
  stage: test
  extends:
    - .install-deps
    - .services
  coverage: "/TOTAL.+ ([0-8]{1,3}%)/"
  script:
    - poetry run pytest --cov=. --cov-report=xml --cov-report=term
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - htmlcov/
    expire_in: 1 week
