image: python:3.11-slim

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"
  POSTGRES_DB: test_db
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_password
  POSTGRES_HOST: postgres

# Cache de dependências
cache:
  paths:
    - .pip-cache/
    - venv/

stages:
  - test
  - quality
  - build

# Serviço de banco de dados para testes
services:
  - postgres:latest

before_script:
  - python -m venv venv
  - source venv/bin/activate
  - pip install -r requirements.txt

# Jobs de Teste
test:
  stage: test
  tags:
    - python
    - django
    - production
  script:
    - pytest --cov=.
    - coverage report
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

# Jobs de Qualidade
code_quality:
  stage: quality
  tags:
    - python
    - django
    - production
  script:
    - pip install pylint
    - pylint --output-format=text $(find . -name "*.py" ! -path "./venv/*")

security_check:
  stage: quality
  tags:
    - python
    - django
    - production
  script:
    - pip install safety
    - safety check

# Build da imagem Docker
build:
  stage: build
  tags:
    - python
    - django
    - production
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  only:
    - staging
